// Code generated by counterfeiter. DO NOT EDIT.
package v1fakes

import (
	"sync"

	v1 "github.com/1xyz/paxossim/v1"
)

type FakeMessage struct {
	SrcStub        func() v1.Addr
	srcMutex       sync.RWMutex
	srcArgsForCall []struct {
	}
	srcReturns struct {
		result1 v1.Addr
	}
	srcReturnsOnCall map[int]struct {
		result1 v1.Addr
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessage) Src() v1.Addr {
	fake.srcMutex.Lock()
	ret, specificReturn := fake.srcReturnsOnCall[len(fake.srcArgsForCall)]
	fake.srcArgsForCall = append(fake.srcArgsForCall, struct {
	}{})
	fake.recordInvocation("Src", []interface{}{})
	fake.srcMutex.Unlock()
	if fake.SrcStub != nil {
		return fake.SrcStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.srcReturns
	return fakeReturns.result1
}

func (fake *FakeMessage) SrcCallCount() int {
	fake.srcMutex.RLock()
	defer fake.srcMutex.RUnlock()
	return len(fake.srcArgsForCall)
}

func (fake *FakeMessage) SrcCalls(stub func() v1.Addr) {
	fake.srcMutex.Lock()
	defer fake.srcMutex.Unlock()
	fake.SrcStub = stub
}

func (fake *FakeMessage) SrcReturns(result1 v1.Addr) {
	fake.srcMutex.Lock()
	defer fake.srcMutex.Unlock()
	fake.SrcStub = nil
	fake.srcReturns = struct {
		result1 v1.Addr
	}{result1}
}

func (fake *FakeMessage) SrcReturnsOnCall(i int, result1 v1.Addr) {
	fake.srcMutex.Lock()
	defer fake.srcMutex.Unlock()
	fake.SrcStub = nil
	if fake.srcReturnsOnCall == nil {
		fake.srcReturnsOnCall = make(map[int]struct {
			result1 v1.Addr
		})
	}
	fake.srcReturnsOnCall[i] = struct {
		result1 v1.Addr
	}{result1}
}

func (fake *FakeMessage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.srcMutex.RLock()
	defer fake.srcMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.Message = new(FakeMessage)
