// Code generated by counterfeiter. DO NOT EDIT.
package v1fakes

import (
	"sync"

	v1 "github.com/1xyz/paxossim/v1"
)

type FakeMessageExchange struct {
	RegisterStub        func(v1.ProcessInbox) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 v1.ProcessInbox
	}
	registerReturns struct {
		result1 error
	}
	registerReturnsOnCall map[int]struct {
		result1 error
	}
	SendStub        func(v1.Addr, v1.Message) error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 v1.Addr
		arg2 v1.Message
	}
	sendReturns struct {
		result1 error
	}
	sendReturnsOnCall map[int]struct {
		result1 error
	}
	SendAllStub        func(v1.ProcessType, v1.Message) error
	sendAllMutex       sync.RWMutex
	sendAllArgsForCall []struct {
		arg1 v1.ProcessType
		arg2 v1.Message
	}
	sendAllReturns struct {
		result1 error
	}
	sendAllReturnsOnCall map[int]struct {
		result1 error
	}
	UnRegisterStub        func(v1.ProcessInbox) error
	unRegisterMutex       sync.RWMutex
	unRegisterArgsForCall []struct {
		arg1 v1.ProcessInbox
	}
	unRegisterReturns struct {
		result1 error
	}
	unRegisterReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMessageExchange) Register(arg1 v1.ProcessInbox) error {
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 v1.ProcessInbox
	}{arg1})
	fake.recordInvocation("Register", []interface{}{arg1})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.registerReturns
	return fakeReturns.result1
}

func (fake *FakeMessageExchange) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeMessageExchange) RegisterCalls(stub func(v1.ProcessInbox) error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeMessageExchange) RegisterArgsForCall(i int) v1.ProcessInbox {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMessageExchange) RegisterReturns(result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) RegisterReturnsOnCall(i int, result1 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) Send(arg1 v1.Addr, arg2 v1.Message) error {
	fake.sendMutex.Lock()
	ret, specificReturn := fake.sendReturnsOnCall[len(fake.sendArgsForCall)]
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 v1.Addr
		arg2 v1.Message
	}{arg1, arg2})
	fake.recordInvocation("Send", []interface{}{arg1, arg2})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		return fake.SendStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sendReturns
	return fakeReturns.result1
}

func (fake *FakeMessageExchange) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeMessageExchange) SendCalls(stub func(v1.Addr, v1.Message) error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = stub
}

func (fake *FakeMessageExchange) SendArgsForCall(i int) (v1.Addr, v1.Message) {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	argsForCall := fake.sendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMessageExchange) SendReturns(result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) SendReturnsOnCall(i int, result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	if fake.sendReturnsOnCall == nil {
		fake.sendReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) SendAll(arg1 v1.ProcessType, arg2 v1.Message) error {
	fake.sendAllMutex.Lock()
	ret, specificReturn := fake.sendAllReturnsOnCall[len(fake.sendAllArgsForCall)]
	fake.sendAllArgsForCall = append(fake.sendAllArgsForCall, struct {
		arg1 v1.ProcessType
		arg2 v1.Message
	}{arg1, arg2})
	fake.recordInvocation("SendAll", []interface{}{arg1, arg2})
	fake.sendAllMutex.Unlock()
	if fake.SendAllStub != nil {
		return fake.SendAllStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sendAllReturns
	return fakeReturns.result1
}

func (fake *FakeMessageExchange) SendAllCallCount() int {
	fake.sendAllMutex.RLock()
	defer fake.sendAllMutex.RUnlock()
	return len(fake.sendAllArgsForCall)
}

func (fake *FakeMessageExchange) SendAllCalls(stub func(v1.ProcessType, v1.Message) error) {
	fake.sendAllMutex.Lock()
	defer fake.sendAllMutex.Unlock()
	fake.SendAllStub = stub
}

func (fake *FakeMessageExchange) SendAllArgsForCall(i int) (v1.ProcessType, v1.Message) {
	fake.sendAllMutex.RLock()
	defer fake.sendAllMutex.RUnlock()
	argsForCall := fake.sendAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMessageExchange) SendAllReturns(result1 error) {
	fake.sendAllMutex.Lock()
	defer fake.sendAllMutex.Unlock()
	fake.SendAllStub = nil
	fake.sendAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) SendAllReturnsOnCall(i int, result1 error) {
	fake.sendAllMutex.Lock()
	defer fake.sendAllMutex.Unlock()
	fake.SendAllStub = nil
	if fake.sendAllReturnsOnCall == nil {
		fake.sendAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) UnRegister(arg1 v1.ProcessInbox) error {
	fake.unRegisterMutex.Lock()
	ret, specificReturn := fake.unRegisterReturnsOnCall[len(fake.unRegisterArgsForCall)]
	fake.unRegisterArgsForCall = append(fake.unRegisterArgsForCall, struct {
		arg1 v1.ProcessInbox
	}{arg1})
	fake.recordInvocation("UnRegister", []interface{}{arg1})
	fake.unRegisterMutex.Unlock()
	if fake.UnRegisterStub != nil {
		return fake.UnRegisterStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unRegisterReturns
	return fakeReturns.result1
}

func (fake *FakeMessageExchange) UnRegisterCallCount() int {
	fake.unRegisterMutex.RLock()
	defer fake.unRegisterMutex.RUnlock()
	return len(fake.unRegisterArgsForCall)
}

func (fake *FakeMessageExchange) UnRegisterCalls(stub func(v1.ProcessInbox) error) {
	fake.unRegisterMutex.Lock()
	defer fake.unRegisterMutex.Unlock()
	fake.UnRegisterStub = stub
}

func (fake *FakeMessageExchange) UnRegisterArgsForCall(i int) v1.ProcessInbox {
	fake.unRegisterMutex.RLock()
	defer fake.unRegisterMutex.RUnlock()
	argsForCall := fake.unRegisterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMessageExchange) UnRegisterReturns(result1 error) {
	fake.unRegisterMutex.Lock()
	defer fake.unRegisterMutex.Unlock()
	fake.UnRegisterStub = nil
	fake.unRegisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) UnRegisterReturnsOnCall(i int, result1 error) {
	fake.unRegisterMutex.Lock()
	defer fake.unRegisterMutex.Unlock()
	fake.UnRegisterStub = nil
	if fake.unRegisterReturnsOnCall == nil {
		fake.unRegisterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unRegisterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMessageExchange) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	fake.sendAllMutex.RLock()
	defer fake.sendAllMutex.RUnlock()
	fake.unRegisterMutex.RLock()
	defer fake.unRegisterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMessageExchange) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1.MessageExchange = new(FakeMessageExchange)
